Grammar

    0 $accept: expr $end

    1 expr: LEFT_PAREN expr RIGHT_PAREN expr
    2     | DIGIT expr
    3     | PLUS expr
    4     | MINUS expr
    5     | MULT expr
    6     | DIVIDE expr
    7     | EQUAL expr
    8     | %empty


Terminals, with rules where they appear

$end (0) 0
error (256)
LEFT_PAREN (258) 1
RIGHT_PAREN (259) 1
PLUS (260) 3
MINUS (261) 4
MULT (262) 5
DIVIDE (263) 6
EQUAL (264) 7
DIGIT (265) 2


Nonterminals, with rules where they appear

$accept (11)
    on left: 0
expr (12)
    on left: 1 2 3 4 5 6 7 8, on right: 0 1 2 3 4 5 6 7


State 0

    0 $accept: . expr $end

    LEFT_PAREN  shift, and go to state 1
    PLUS        shift, and go to state 2
    MINUS       shift, and go to state 3
    MULT        shift, and go to state 4
    DIVIDE      shift, and go to state 5
    EQUAL       shift, and go to state 6
    DIGIT       shift, and go to state 7

    $default  reduce using rule 8 (expr)

    expr  go to state 8


State 1

    1 expr: LEFT_PAREN . expr RIGHT_PAREN expr

    LEFT_PAREN  shift, and go to state 1
    PLUS        shift, and go to state 2
    MINUS       shift, and go to state 3
    MULT        shift, and go to state 4
    DIVIDE      shift, and go to state 5
    EQUAL       shift, and go to state 6
    DIGIT       shift, and go to state 7

    $default  reduce using rule 8 (expr)

    expr  go to state 9


State 2

    3 expr: PLUS . expr

    LEFT_PAREN  shift, and go to state 1
    PLUS        shift, and go to state 2
    MINUS       shift, and go to state 3
    MULT        shift, and go to state 4
    DIVIDE      shift, and go to state 5
    EQUAL       shift, and go to state 6
    DIGIT       shift, and go to state 7

    $default  reduce using rule 8 (expr)

    expr  go to state 10


State 3

    4 expr: MINUS . expr

    LEFT_PAREN  shift, and go to state 1
    PLUS        shift, and go to state 2
    MINUS       shift, and go to state 3
    MULT        shift, and go to state 4
    DIVIDE      shift, and go to state 5
    EQUAL       shift, and go to state 6
    DIGIT       shift, and go to state 7

    $default  reduce using rule 8 (expr)

    expr  go to state 11


State 4

    5 expr: MULT . expr

    LEFT_PAREN  shift, and go to state 1
    PLUS        shift, and go to state 2
    MINUS       shift, and go to state 3
    MULT        shift, and go to state 4
    DIVIDE      shift, and go to state 5
    EQUAL       shift, and go to state 6
    DIGIT       shift, and go to state 7

    $default  reduce using rule 8 (expr)

    expr  go to state 12


State 5

    6 expr: DIVIDE . expr

    LEFT_PAREN  shift, and go to state 1
    PLUS        shift, and go to state 2
    MINUS       shift, and go to state 3
    MULT        shift, and go to state 4
    DIVIDE      shift, and go to state 5
    EQUAL       shift, and go to state 6
    DIGIT       shift, and go to state 7

    $default  reduce using rule 8 (expr)

    expr  go to state 13


State 6

    7 expr: EQUAL . expr

    LEFT_PAREN  shift, and go to state 1
    PLUS        shift, and go to state 2
    MINUS       shift, and go to state 3
    MULT        shift, and go to state 4
    DIVIDE      shift, and go to state 5
    EQUAL       shift, and go to state 6
    DIGIT       shift, and go to state 7

    $default  reduce using rule 8 (expr)

    expr  go to state 14


State 7

    2 expr: DIGIT . expr

    LEFT_PAREN  shift, and go to state 1
    PLUS        shift, and go to state 2
    MINUS       shift, and go to state 3
    MULT        shift, and go to state 4
    DIVIDE      shift, and go to state 5
    EQUAL       shift, and go to state 6
    DIGIT       shift, and go to state 7

    $default  reduce using rule 8 (expr)

    expr  go to state 15


State 8

    0 $accept: expr . $end

    $end  shift, and go to state 16


State 9

    1 expr: LEFT_PAREN expr . RIGHT_PAREN expr

    RIGHT_PAREN  shift, and go to state 17


State 10

    3 expr: PLUS expr .

    $default  reduce using rule 3 (expr)


State 11

    4 expr: MINUS expr .

    $default  reduce using rule 4 (expr)


State 12

    5 expr: MULT expr .

    $default  reduce using rule 5 (expr)


State 13

    6 expr: DIVIDE expr .

    $default  reduce using rule 6 (expr)


State 14

    7 expr: EQUAL expr .

    $default  reduce using rule 7 (expr)


State 15

    2 expr: DIGIT expr .

    $default  reduce using rule 2 (expr)


State 16

    0 $accept: expr $end .

    $default  accept


State 17

    1 expr: LEFT_PAREN expr RIGHT_PAREN . expr

    LEFT_PAREN  shift, and go to state 1
    PLUS        shift, and go to state 2
    MINUS       shift, and go to state 3
    MULT        shift, and go to state 4
    DIVIDE      shift, and go to state 5
    EQUAL       shift, and go to state 6
    DIGIT       shift, and go to state 7

    $default  reduce using rule 8 (expr)

    expr  go to state 18


State 18

    1 expr: LEFT_PAREN expr RIGHT_PAREN expr .

    $default  reduce using rule 1 (expr)
